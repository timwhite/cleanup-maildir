#!/usr/bin/python -tt
#        .__                                     
#   ____ |  |   ____ _____    ____  __ ________  
# _/ ___\|  | _/ __ \\__  \  /    \|  |  \____ \ 
# \  \___|  |_\  ___/ / __ \|   |  \  |  /  |_> >
#  \___  >____/\___  >____  /___|  /____/|   __/ 
#      \/          \/     \/     \/      |__|    
#                .__.__       .___.__            
#   _____ _____  |__|  |    __| _/|__|______     
#  /     \\__  \ |  |  |   / __ | |  \_  __ \    
# |  Y Y  \/ __ \|  |  |__/ /_/ | |  ||  | \/    
# |__|_|  (____  /__|____/\____ | |__||__|       
#       \/     \/              \/                
#
# Copyright 2004-2006 Nathaniel W. Turner <nate@houseofnate.net>
# Copyright 2018 wiRe <mail@w1r3.de>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

"""
USAGE
  cleanup-maildir [OPTION].. COMMAND FOLDERNAME..

DESCRIPTION
  Cleans up old messages in FOLDERNAME; the exact action taken
  depends on COMMAND. Multiple FOLDERNAMEs or GLOB patterns are
  allowed. Be aware that there is no filter for duplicates.

COMMANDS
  archive - move old messages to destination folder
  delete! - permanently delete old messages (will be gone forever!)

OPTIONS
  -h, --help
      Show this help.
  -q, --quiet
      Suppress normal output.
  -v, --verbose
      Output extra information for testing.
  -d, --dry-run
      Do not actually touch any files; just say what would be done.
  -n, --keep-new
      Do not touch messages that are flagged as unread or new.
  -t, --keep-threads
      Do not touch messages if any message in this thread is flagged.
      Note: the thread-detection mechanism is currently based purely on
      a message's subject. The In-Reply-To header is not observed yet.
  --age=N
      Only touch messages older than N days. Default is 365 days.
  --dest=F
      Path to destination maildir folder. Default is './Archive/%y/%m'.

      The following patterns will be substituted:
        %y - year (e.g. 2018)
        %m - month (e.g. 01 to 12)
        %d - day (e.g. 01 to 31)
        %f - folder name of this mail
        %% - replaced by a single percent sign

EXAMPLES
  # Archive messages from Sent and all INBOX folders after 90 days:
  cleanup-maildir --age=90 --dest=./Archive/%f archive ./Sent ./INBOX*"

  # Delete over 1 year old message in 'Lists/debian-devel' folder,
  # except messages that are flagged as unread:
  cleanup-maildir --keep-new delete! './Lists.debian-devel'
"""

__version__ = "0.4.0"
# $Id$
# $URL$

import mailbox
import os.path
import os
import glob
import rfc822
import string
import socket
import time
import logging
import sys
import getopt


def mkMaildir(maildirPath):
    """Make a Maildir structure rooted at 'maildirPath'"""
    os.makedirs(maildirPath, 0700)
    os.mkdir(os.path.join(maildirPath, 'tmp'), 0700)
    os.mkdir(os.path.join(maildirPath, 'new'), 0700)
    os.mkdir(os.path.join(maildirPath, 'cur'), 0700)


class MaildirWriter(object):

    """Deliver messages into a Maildir"""

    maildirPath = None
    counter = 0

    def __init__(self, maildirPath=None):
        """Create a MaildirWriter that manages the Maildir at 'maildirPath'

        Arguments:
        maildirPath -- if specified, used as the default Maildir for this object
        """
        if maildirPath != None:
            if not os.path.isdir(maildirPath):
                raise ValueError, 'Path does not exist: %s' % maildirPath
            self.maildirPath = maildirPath
        self.logger = logging.getLogger('MaildirWriter')

    def deliver(self, msg, maildirPath=None):
        """Deliver a message to a Maildir

        Arguments:
        msg -- a message object
        maildirPath -- the path of the Maildir; if None, uses default from __init__
        """
        if maildirPath != None:
            self.maildirPath = maildirPath
        if self.maildirPath == None or not os.path.isdir(self.maildirPath):
            raise ValueError, 'Path does not exist'
        tryCount = 1
        srcFile = msg.getFilePath()
        (dstName, tmpFile, newFile, dstFile) = (None, None, None, None)
        while 1:
            try:
                dstName = "%d.%d_%d.%s" % (int(time.time()), os.getpid(),
                                           self.counter, socket.gethostname())
                tmpFile = os.path.join(os.path.join(self.maildirPath, "tmp"), dstName)
                newFile = os.path.join(os.path.join(self.maildirPath, "new"), dstName)
                self.logger.debug("deliver: attempt copy %s to %s" %
                              (srcFile, tmpFile))
                os.link(srcFile, tmpFile) # Copy into tmp
                self.logger.debug("deliver: attempt link to %s" % newFile)
                os.link(tmpFile, newFile) # Link into new
            except OSError, (n, s):
                n
                self.logger.critical(
                        "deliver failed: %s (src=%s tmp=%s new=%s i=%d)" %
                        (s, srcFile, tmpFile, newFile, tryCount))
                self.logger.info("sleeping")
                time.sleep(2)
                tryCount += 1
                self.counter += 1
                if tryCount > 10:
                    raise OSError("too many failed delivery attempts")
            else:
                break

        # Successful delivery; increment deliver counter
        self.counter += 1

        # For the rest of this method we are acting as an MUA, not an MDA.

        # Move message to cur and restore any flags
        dstFile = os.path.join(os.path.join(self.maildirPath, "cur"), dstName)
        if msg.getFlags() != None:
            dstFile += ':' + msg.getFlags()
        self.logger.debug("deliver: attempt link to %s" % dstFile)
        os.link(newFile, dstFile)
        os.unlink(newFile)

        # Cleanup tmp file
        os.unlink(tmpFile)


class MessageDateError(TypeError):
    """Indicate that the message date was invalid"""
    pass


class MaildirMessage(rfc822.Message):

    """An email message

    Has extra Maildir-specific attributes
    """

    def getFilePath(self):
        if sys.hexversion >= 0x020500F0:
            return self.fp._file.name
        else:
            return self.fp.name

    def isFlagged(self):
        """return true if the message is flagged as important"""
        import re
        fname = self.getFilePath()
        if re.search(r':.*F', fname) != None:
            return True
        return False

    def getFlags(self):
        """return the flag part of the message's filename"""
        parts = self.getFilePath().split(':')
        if len(parts) == 2:
            return parts[1]
        return None

    def isNew(self):
        """return true if the message is marked as unread"""
        # XXX should really be called isUnread
        import re
        fname = self.getFilePath()
        if re.search(r':.*S', fname) != None:
            return False
        return True

    def getSubject(self):
        """get the message's subject as a unicode string"""

        import email.header
        s = self.getheader("Subject")
        try:
            return u"".join(map(lambda x: x[0].decode(x[1] or 'ASCII', 'replace'),
                                email.header.decode_header(s)))
        except(LookupError):
            return s

    def getSubjectHash(self):
        """get the message's subject in a "normalized" form

        This currently means lowercasing and removing any reply or forward
        indicators.
        """
        import re
        import string
        s = self.getSubject()
        if s == None:
            return '(no subject)'
        return re.sub(r'^(re|fwd?):\s*', '', string.strip(s.lower()))

    def getDateSent(self):
        """Get the time of sending from the Date header

        Returns a time object using time.mktime.  Not very reliable, because
        the Date header can be missing or spoofed (and often is, by spammers).
        Throws a MessageDateError if the Date header is missing or invalid.
        """
        dh = self.getheader('Date')
        if dh == None:
            return None
        try:
            return time.mktime(rfc822.parsedate(dh))
        except ValueError:
            raise MessageDateError("message has missing or bad Date")
        except TypeError:  # gets thrown by mktime if parsedate returns None
            raise MessageDateError("message has missing or bad Date")
        except OverflowError:
            raise MessageDateError("message has missing or bad Date")

    def getDateRecd(self):
        """Get the time the message was received"""
        # XXX check that stat returns time in UTC, fix if not
        return os.stat(self.getFilePath())[8]

    def getDateSentOrRecd(self):
        """Get the time the message was sent, fall back on time received"""
        try:
            d = self.getDateSent()
            if d != None:
                return d
        except MessageDateError:
            pass
        return self.getDateRecd()

    def getAge(self):
        """Get the number of seconds since the message was received"""
        msgTime = self.getDateRecd()
        msgAge = time.mktime(time.gmtime()) - msgTime
        return msgAge / (60*60*24)


class MaildirCleaner(object):

    """Clean a maildir by moving or deleting old messages"""

    writer = None
    stats = {'processed': 0, 'cleaned': 0}
    keepSubjects = {}
    isDryRun = False
    keepNew = False
    keepThreads = False
    ageThreshold = 365
    destPattern = './Archive/%y/%m'

    def __init__(self):
        """Initialize the MaildirCleaner"""
        self.writer = MaildirWriter()
        self.logger = logging.getLogger('MaildirCleaner')
        self.logger.setLevel(logging.DEBUG)

    def clean(self, mode, maildirPath):

        """Archives or deletes messages older than N days

        Arguments:
        mode -- the cleaning mode.  Valid modes are:
            archive -- moves the messages to folders based on their date
            delete! -- deletes the messages
        maildirPath -- path to a valid maildir folder
        """

        if not mode in ('archive', 'delete!'):
            raise ValueError

        if (self.keepThreads):
            self.scanSubjects(maildirPath)

        if not os.path.isdir(maildirPath) \
                or not os.path.isdir(os.path.join(maildirPath, 'new')) \
                or not os.path.isdir(os.path.join(maildirPath, 'cur')) \
                or not os.path.isdir(os.path.join(maildirPath, 'tmp')):
            self.logger.error("Path %s does not point to a valid maildir folder" % maildirPath)
            return

        maildir = mailbox.Maildir(maildirPath, MaildirMessage)

        folderName = os.path.basename(os.path.normpath(maildirPath))
        
        dryRunMsg = ""
        if self.isDryRun:
            dryRunMsg = "(Not really) "

        # Move old messages
        for i, msg in enumerate(maildir):
            if msg.getAge() >= self.ageThreshold:
                if self.keepThreads \
                        and msg.getSubjectHash() in self.keepSubjects:
                    self.log(logging.DEBUG, "Keeping #%d (topic flagged)" % i, msg)
                elif self.keepNew and msg.isNew(): 
                    self.log(logging.DEBUG, "Keeping #%d (flagged new)" % i, msg)                
                else:
                    if mode == 'delete!':
                        self.log(logging.INFO, "%sDeleting #%d" %
                                 (dryRunMsg, i), msg)
                        if not self.isDryRun:
                            os.unlink(msg.getFilePath())
                    else: # mode == 'archive'
                        # substitute destination folder per email
                        mdate = time.gmtime(msg.getDateSentOrRecd())
                        destPath = self.getDestPath({ \
                            '%%': '%', \
                            '%y': str(mdate[0]), \
                            '%m': time.strftime("%m", mdate), \
                            '%d': time.strftime("%d", mdate), \
                            '%f': folderName})
                        self.log(logging.INFO, "%sArchiving #%d to %s" %
                                 (dryRunMsg, i, destPath), msg)
                        if not self.isDryRun:
                            # Create the subfolder if needed
                            if not os.path.exists(destPath):
                                mkMaildir(destPath)
                            # Deliver
                            self.writer.deliver(msg, destPath)
                            os.unlink(msg.getFilePath())
                    self.stats['cleaned'] += 1
            self.stats['processed'] += 1

    def getDestPath(self, args):
        """Retrieve actual destination path by substituting arguments inside pattern"""
        result = self.destPattern
        for old, new in args.items():
            result = result.replace(old, new)
        return result

    def scanSubjects(self, maildirPath):
        """Scans for flagged subjects"""
        self.logger.info("Scanning for flagged subjects...")
        maildir = mailbox.Maildir(maildirPath, MaildirMessage)
        self.keepSubjects = {}
        for i, msg in enumerate(maildir):
            if msg.isFlagged():
                self.keepSubjects[msg.getSubjectHash()] = 1
                self.logger.debug("Flagged (%d): %s", i, msg.getSubjectHash())

    def log(self, lvl, text, msgObj):
        """Log some text with the subject of a message"""
        subj = msgObj.getSubject()
        if subj == None:
            subj = "(no subject)"
        self.logger.log(lvl, text + ": " + subj)

###############################################################################

mode = None
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
logging.disable(logging.INFO - 1)
logger = logging.getLogger('cleanup-maildir')
cleaner = MaildirCleaner()

# Read command-line arguments
try:
    opts, args = getopt.getopt(sys.argv[1:],
            "hqvdnt",
            ["help", "version", "quiet", "verbose",
             "dry-run", "keep-new", "keep-threads",
             "age=", "dest="])
except getopt.GetoptError, (msg, opt):
    logger.error("%s\n\n%s" % (msg, __doc__))
    sys.exit(2)
output = None
for o, a in opts:
    if o in ("-h", "--help"):
        print __doc__
        sys.exit()
    if o == "--version":
        print __version__
        sys.exit()
    if o in ("-q", "--quiet"):
        logging.disable(logging.WARNING - 1)
    if o in ("-v", "--verbose"):
        logging.disable(logging.DEBUG - 1)
    if o in ("-d", "--dry-run"):
        cleaner.isDryRun = True
    if o in ("-n", "--keep-new"):
        cleaner.keepNew = True
    if o in ("-t", "--keep-threads"):
        cleaner.keepThreads = True
    if o in ("--age"):
        cleaner.ageThreshold = int(a)
    if o == "--dest":
        cleaner.destPattern = a

# Read command
if len(args) < 1:
    print __doc__
    sys.exit()
mode = args.pop(0)
if not mode in ('archive', 'delete!'):
    logger.error("%s is not a valid command" % mode)
    sys.exit(2)
if mode == 'archive':
    logger.debug("Destination is " + cleaner.destPattern)

# Clean each given folder
if len(args) == 0:
    logger.error("No folder specified")
    sys.exit(2)
for arg in args:
    for dir in glob.glob(arg):
        if os.path.isdir(dir) and os.path.exists(dir):
            logger.debug("Cleaning %s" % dir)
            cleaner.clean(mode, dir)

# Print report
logger.info('Processed %d message(s)' % cleaner.stats['processed'])
logger.info('Cleaned %d message(s)' % cleaner.stats['cleaned'])
